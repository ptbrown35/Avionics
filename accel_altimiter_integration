// I2C device class (I2Cdev) demonstration Arduino sketch for MPU9150
// 1/4/2013 original by Jeff Rowberg <jeff@rowberg.net> at https://github.com/jrowberg/i2cdevlib
//          modified by Aaron Weiss <aaron@sparkfun.com>
//
// Changelog:
//     2011-10-07 - initial release
//     2013-1-4 - added raw magnetometer output

/* ============================================
  I2Cdev device library code is placed under the MIT license

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  ===============================================
*/

// Arduino Wire library is required if I2Cdev I2CDEV_ARDUINO_WIRE implementation
// is used in I2Cdev.h
#include "Wire.h"

// I2Cdev and MPU6050 must be installed as libraries, or else the .cpp/.h files
// for both classes must be in the include path of your project
#include "I2Cdev.h"
#include "MPU6050.h"

// class default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
MPU6050 accelgyro;

#define LED_PIN 13
bool blinkState = false;

long vX, vY, vZ, dvX, dvY, dvZ, paX = 0, paY = 0, paZ = 0;
long X, Y, Z, dX, dY, dZ, pvX = 0, pvY = 0, pvZ = 0;
int16_t aX, aY, aZ;

long t0 = 0, t1;

void setup() {
  // join I2C bus (I2Cdev library doesn't do this automatically)
  Wire.begin();

  // initialize serial communication
  // (38400 chosen because it works as well at 8MHz as it does at 16MHz, but
  // it's really up to you depending on your project)
  Serial.begin(38400);

  // initialize device
  Serial.println("Initializing I2C devices...");
  accelgyro.initialize();

  // verify connection
  Serial.println("Testing device connections...");
  Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");

  accelgyro.setFullScaleAccelRange(MPU6050_ACCEL_FS_2);

  // configure Arduino LED for
  pinMode(LED_PIN, OUTPUT);
}

void loop() {
  acceleration(); // get acceleration values
  velocity(); // velocity integration from accel values
  position(); // position integration from vel values

//  if (aX != 0 && aY != 0 && aZ != 0) { // condition for launch
//    vX = 0;
//    vY = 0;
//    vZ = 0;
//    X = 0;
//    Y = 0;
//    Z = 0;
//  }
//
//  if (aX == 0 && aY == 0 && aZ == 0 && vX == 0 && vY == 0 && vZ == 0 && X != 0 && Y != 0 && Z != 0) { // condition for apogee
//    // write t, X, Y, Z to SD card
//    // reset values
//  }
//
//  if (aX == 0 && aY == 0 && aZ == 0 && vX == 0 && vY == 0 && vZ == 0 && X == 0 && Y == 0 && Z == 0) { // condition for landing
//    // write landing values
//  }

  t0 = t1;

  //blink LED to indicate activity
  blinkState = !blinkState;
  digitalWrite(LED_PIN, blinkState);
  Serial.println();
}

void acceleration() {

  accelgyro.getAcceleration(&aX, &aY, &aZ); // read raw accel measurements from device
  t1 = millis(); // timestamp recording (unit: 10^(-3) s

  Serial.print("raw accel (t,x,y,z):\t"); // display tab-separated accel x,y,z values
  Serial.print(t1); Serial.print("\t");
  Serial.print(aX); Serial.print("\t");
  Serial.print(aY); Serial.print("\t");
  Serial.print(aZ); Serial.print("\t");
}

void velocity() {

  dvX = (aX + paX) / 2 * (t1 - t0) / 1000; // integrate accel wrt time (units: g*s)
  vX += dvX;
  dvY = (aY + paY) / 2 * (t1 - t0) / 1000;
  vY += dvY;
  dvZ = (aZ + paZ) / 2 * (t1 - t0) / 1000;
  vZ += dvZ;

  paX = aX; // set current accel value to previous for next iteration
  paY = aY;
  paZ = aZ;

  Serial.print("vel (x,y,z):\t"); // display tab-separated vel x,y,z values
  Serial.print(vX); Serial.print("\t");
  Serial.print(vY); Serial.print("\t");
  Serial.print(vZ); Serial.print("\t");
}

void position() {

  dX = (vX + pvX) / 2 * (t1 - t0); // integrate vel wrt time (units: g*s*s)
  X += dX;
  dY = (vY + pvY) / 2 * (t1 - t0);
  Y += dY;
  dZ = (vZ + pvZ) / 2 * (t1 - t0);
  Z += dZ;

  pvX = vX; // set current vel value to previous for next iteration
  pvY = vY;
  pvZ = vZ;

  Serial.print("pos (x,y,z):\t"); // display tab-separated pos x,y,z values
  Serial.print(X); Serial.print("\t");
  Serial.print(Y); Serial.print("\t");
  Serial.print(Z); Serial.print("\t");
}
